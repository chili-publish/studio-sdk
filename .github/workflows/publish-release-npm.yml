name: Publish Release
on:
  release:
    types: [released]
env:
  NODE_VERSION: 22.x
permissions:
  id-token: write  # Required for OIDC
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get GitHub App Access Token
        id: github-app-access-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.GH_APP_ID_CHILI_FRONTEND_VERSION_MANAGER }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY_CHILI_FRONTEND_VERSION_MANAGER }}
          owner: ${{ github.repository_owner }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.github-app-access-token.outputs.token }}
      - name: Check cache
        id: cache
        uses: actions/cache@v4
        with:
          path: packages/sdk/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}-0
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Use Node ${{ env.NODE_VERSION }} for npm registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"
      - run: npm i -g npm@latest
      - name: Force OIDC (remove tokens & point to npmjs)
        run: |
          set -euxo pipefail
          # Show if anything suspicious is present
          env | grep -E 'NODE_AUTH_TOKEN|NPM_TOKEN' || true
          npm config get registry
          # Remove env token + any temp .npmrc with auth
          unset NODE_AUTH_TOKEN || true
          npm config delete //registry.npmjs.org/:_authToken || true
          if [ -n "${NPM_CONFIG_USERCONFIG:-}" ] && [ -f "$NPM_CONFIG_USERCONFIG" ]; then
            rm -f "$NPM_CONFIG_USERCONFIG"
          fi
          # Ensure we publish to npmjs for our scope
          npm config set registry https://registry.npmjs.org/
          npm config set @chili-publish:registry https://registry.npmjs.org/
          npm ping
      - name: install dependencies
        run: yarn install
      - name: run linting
        run: yarn ci-lint
      - name: run tests
        run: yarn cover
      - name: bump version locally
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin
          git checkout -B main origin/main
          npm version patch --git-tag-version=false
      - name: run readmeUpdater
        run: yarn make-badges
      - name: execute local js script
        run: node ./.github/scripts/replicate-version.js
      - name: build code
        run: yarn build
      - name: Publish SDK (OIDC)
        working-directory: packages/sdk
        env:
          NPM_CONFIG_PROVENANCE: "true"
        run: |
          node -p "require('./package.json').name + ' ' + require('./package.json').version"
          npm pack --dry-run
          npm publish --access public --tag latest

      - name: Publish Connectors (OIDC)
        working-directory: packages/connectors
        env:
          NPM_CONFIG_PROVENANCE: "true"
        run: |
          node -p "require('./package.json').name + ' ' + require('./package.json').version"
          npm pack --dry-run
          npm publish --access public --tag latest
      - name: execute commit script
        run: node ./.github/scripts/commit.js
      - name: copy file branch
        env:
          RELEASE_NAME: ${{ github.event.release.name }}
        run: |
          path=packages/sdk/upload/latest
          minorversion=$(echo $RELEASE_NAME | grep -o "^[0-9]\+\.[0-9]\+")
          patchversion=$(echo $RELEASE_NAME | grep -o "^[0-9]\+\.[0-9]\+\.[0-9]\+" | cut -d. -f3)
          minorlatestpath=packages/sdk/upload/$minorversion/latest
          patchlatestpath=packages/sdk/upload/$minorversion/$patchversion/latest
          mkdir -p ${path%"/merge"}
          cp -R packages/sdk/_bundles/* ${path%"/merge"}
          mkdir -p ${minorlatestpath%"/merge"}
          cp -R packages/sdk/_bundles/* ${minorlatestpath%"/merge"}
          mkdir -p ${patchlatestpath%"/merge"}
          cp -R packages/sdk/_bundles/* ${patchlatestpath%"/merge"}

      - name: Copy to Azure Blob Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch -d sdk -s packages/sdk/upload/ --connection-string "${{ secrets.AZURE_CDN_STUDIO_PRD_CONNECTION_STRING }}" --overwrite true
      - name: prepare for actions upload
        run: |
          node cicd.js actions node scripts/prepare-release.mjs
      - name: Copy to Azure Blob Storage (Actions)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch -d sdk -s packages/actions/cdn/ --connection-string "${{ secrets.AZURE_CDN_STUDIO_PRD_CONNECTION_STRING }}" --overwrite true
      - name: Purge Cloudflare CDN
        uses: chili-publish/delivery-github-utilities/actions/cloudflare/purge-cdn@cloudflare-purge-cdn_1.0.0
        with:
          environment: PRD
          api-token: ${{ secrets.CLOUDFLARE_CDN_PURGE_API_TOKEN_PRD }}
          path-prefix: sdk

  bump-version:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get GitHub App Access Token
        id: github-app-access-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.GH_APP_ID_CHILI_FRONTEND_VERSION_MANAGER }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY_CHILI_FRONTEND_VERSION_MANAGER }}
          owner: ${{ github.repository_owner }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.github-app-access-token.outputs.token }}
      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin
          git checkout -B main origin/main
          npm version prepatch --git-tag-version=false
      - name: execute local js script
        run: node ./.github/scripts/replicate-version.js
      - name: execute commit script
        run: node ./.github/scripts/commit.js
