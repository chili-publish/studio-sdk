name: Update Engine Version Management
description: 'Update the engine version management file in case of an engine patch update'
on:
  workflow_dispatch:
    inputs:
      sdk_version:
        description: 'SDK version to update or add (e.g. 1.17 or latest)'
        required: true
        type: string
      engine_version:
        description: 'New engine version (e.g. 2.1.1)'
        required: true
        type: string
      environment:
        description: 'Target environment (UAT or PROD)'
        required: true
        type: choice
        default: 'UAT'
        options:
          - 'UAT'
          - 'PROD'
      update_latest:
        description: 'Also update the "latest" entry with this SDK/engine version?'
        required: false
        default: false
        type: boolean

jobs:
  update-engine-version-management:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download and update versions file
        run: |
          # Create temporary directory
          mkdir -p temp
          # Download current versions file
          curl -o temp/supported-versions.json https://studio-cdn.chiligrafx.com/shared/version-management/supported-versions.json
          
          # Create updated versions file using node
          node -e "
            const fs = require('fs');
            const versions = require('./temp/supported-versions.json');
            const sdkVersion = process.env['SDK_VERSION'] || '${{ inputs.sdk_version }}';
            const engineVersion = process.env['ENGINE_VERSION'] || '${{ inputs.engine_version }}';
            const updateLatest = (process.env['UPDATE_LATEST'] === 'true' || process.env['UPDATE_LATEST'] === true || '${{ inputs.update_latest }}' === 'true' || '${{ inputs.update_latest }}' === true);

            if (sdkVersion === 'latest') {
              // Get the major.minor version from the latest sdkVersion
              const latestSdkVersion = versions.latest.sdkVersion;
              const majorMinor = latestSdkVersion.split('.').slice(0, 2).join('.');
              
              // Update both latest and the corresponding version entry
              versions.latest.engineVersion = engineVersion;
              versions[majorMinor].engineVersion = engineVersion;
              
              console.log('Updated engine version for latest and ' + majorMinor + ' to ' + engineVersion);
            } else {
              // Add or update the SDK version entry
              if (!versions[sdkVersion]) {
                // Add new SDK version
                versions[sdkVersion] = {
                  sdkVersion: sdkVersion,
                  engineVersion: engineVersion
                };
                console.log('Added new SDK version ' + sdkVersion + ' with engine version ' + engineVersion);
              } else {
                // Update engine version for the specified SDK version
                versions[sdkVersion].engineVersion = engineVersion;
                console.log('Updated engine version for SDK version ' + sdkVersion + ' to ' + engineVersion);
              }
              
              // Optionally update the latest entry
              if (updateLatest) {
                versions.latest.sdkVersion = sdkVersion;
                versions.latest.engineVersion = engineVersion;
                console.log('Updated latest entry to SDK version ' + sdkVersion + ' and engine version ' + engineVersion);
              }
            }
            
            fs.writeFileSync('./temp/supported-versions.json', JSON.stringify(versions, null, 2));
          "
 
      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: >-
            {
              "clientId": "${{ vars.SP_FRONTEND_CLIENT_ID }}",
              "clientSecret": "${{ secrets.SP_FRONTEND_CLIENT_SECRET }}",
              "tenantId": "${{ vars.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ (inputs.environment == 'PROD') && vars.SUBSCRIPTION_ID_PROD || vars.SUBSCRIPTION_ID_UAT }}"
            }
      - name: Upload build
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
            --account-name ${{ (inputs.environment == 'PROD') && vars.STORAGE_ACCOUNT_NAME_PROD || vars.STORAGE_ACCOUNT_NAME_UAT }} \
            --source temp/ \
            --destination shared/version-management \
            --overwrite true \
            --auth-mode login
            