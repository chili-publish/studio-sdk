# ORIGINAL WORKFLOW (COMMENTED OUT FOR TESTING)
# name: Create or Update Release PR
#
# on:
#   workflow_dispatch:
#     inputs:
#       release_type:
#         description: "Release type (uat or prd)"
#         required: true
#         type: choice
#         options:
#           - uat
#           - prd
#       version_type:
#         description: "Version increment (major, minor, patch)"
#         required: true
#         type: choice
#         options:
#           - major
#           - minor
#           - patch
#       source_branch:
#         description: "Existing release branch to update (optional)"
#         required: false
#         type: string
#
# jobs:
#   release:
#     runs-on: ubuntu-latest
#     # Safety check: Don't run on main branch
#     if: github.ref != 'refs/heads/main'
#     permissions:
#       contents: read
#       pull-requests: write
#     env:
#       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18
#
#       - name: Get current version
#         id: get_version
#         run: |
#           VERSION=$(node -p "require('./package.json').version")
#           echo "version=$VERSION" >> $GITHUB_OUTPUT
#
#       - name: Update existing release branch
#         id: update_branch
#         if: github.event.inputs.source_branch != ''
#         run: |
#           git fetch origin ${{ github.event.inputs.source_branch }}
#           git checkout ${{ github.event.inputs.source_branch }}
#           if [ "${{ github.event.inputs.release_type }}" = "uat" ]; then
#             NEW_VERSION=$(npm version prerelease --preid=rc --git-tag-version=false)
#           else
#             NEW_VERSION=$(npm version patch --git-tag-version=false)
#           fi
#           echo "branch_name=${{ github.event.inputs.source_branch }}" >> $GITHUB_OUTPUT
#           echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
#
#       - name: Create new release branch
#         if: github.event.inputs.source_branch == ''
#         id: create_branch
#         run: |
#           # Bump version first (package.json changes but not committed)
#           if [ "${{ github.event.inputs.release_type }}" = "uat" ]; then
#             NEW_VERSION=$(npm version pre${{ github.event.inputs.version_type }} --preid=rc --git-tag-version=false)
#             BRANCH_NAME="release/$(echo $NEW_VERSION | sed 's/^v//' | sed 's/-rc.*//')"
#           else
#             NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --git-tag-version=false)
#             BRANCH_NAME="release/$(echo $NEW_VERSION | sed 's/^v//')"
#           fi
#
#           echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
#           echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
#
#           # Create branch with the correct name
#           git checkout -b $BRANCH_NAME
#
#       - name: Commit version bump
#         run: |
#           git config --global user.name 'github-actions[bot]'
#           git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#           git add package.json yarn.lock || true
#           git commit -m "chore: bump version to ${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version }} [skip ci]"
#
#       - name: Push branch
#         run: |
#           BRANCH_NAME="${{ steps.create_branch.outputs.branch_name || github.event.inputs.source_branch }}"
#           git push -u origin $BRANCH_NAME
#           echo "Push completed successfully"
#
#       - name: Create or update PR
#         id: pr
#         run: |
#           # Check if PR already exists
#           EXISTING_PR=$(gh pr list --head ${{ steps.create_branch.outputs.branch_name || github.event.inputs.source_branch }} --json number,url -q '.[0].url' 2>/dev/null || echo "")
#
#           if [ -n "$EXISTING_PR" ]; then
#             # Update existing PR
#             echo "pull-request-url=$EXISTING_PR" >> $GITHUB_OUTPUT
#             echo "PR already exists: $EXISTING_PR"
#           else
#             # Create new PR
#             PR_URL=$(gh pr create \
#               --head ${{ steps.create_branch.outputs.branch_name || github.event.inputs.source_branch }} \
#               --base ${{ github.event.repository.default_branch }} \
#               --title "Release ${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version }}" \
#               --body "Automated release PR for ${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version }}" \
#               --label ${{ github.event.inputs.release_type }})
#             echo "pull-request-url=$PR_URL" >> $GITHUB_OUTPUT
#             echo "Created new PR: $PR_URL"
#           fi
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#       - name: Dismiss previous approvals (if updating)
#         if: github.event.inputs.source_branch != ''
#         run: |
#           BRANCH_NAME="${{ steps.create_branch.outputs.branch_name || github.event.inputs.source_branch }}"
#           PR_NUMBER=$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number')
#           if [ -n "$PR_NUMBER" ]; then
#             gh api -X POST repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews/dismissals \
#               -f message="Approvals dismissed due to version update"
#           fi
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#       # Send Teams notification
#       - name: Notify Teams
#         run: |
#           BRANCH_NAME="${{ steps.create_branch.outputs.branch_name || github.event.inputs.source_branch }}"
#           NEW_VERSION="${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version  }}"
#           PR_URL="${{ steps.pr.outputs.pull-request-url }}"
#
#           payload=$(cat <<EOF
#           {
#               "text": "ðŸš€ **Release PR Created/Updated**\n\n**PR Link:** $PR_URL\n\n**Release Type:** ${{ github.event.inputs.release_type }}\n**Version:** $NEW_VERSION\n**Branch:** $BRANCH_NAME\n\nPlease review and approve the release PR."
#           }
#           EOF
#           )
#           curl --request POST \
#           --header "Content-Type: application/json" \
#           --data "$payload" \
#           "https://prod-99.westeurope.logic.azure.com:443/workflows/e47919c9301a4d0893124469d80f6cf2/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=0WZGySneST3jpYyoLplgpKDXPoZU4NEe2zSufLVzsFo"

# TEST WORKFLOW - RUNS ON PUSH WITH ENV VARIABLES
name: Create or Update Release PR (Test)

on:
  push:
    branches:
      - "feature/WRS-2501" # Only run on test branches
  workflow_dispatch: # Keep manual trigger for testing

jobs:
  release:
    runs-on: ubuntu-latest
    # Safety check: Don't run on main branch
    if: github.ref != 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TYPE: "uat" # Hardcoded for testing
      VERSION_TYPE: "patch" # Hardcoded for testing
      SOURCE_BRANCH: "" # Empty for new releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update existing release branch
        id: update_branch
        if: env.SOURCE_BRANCH != ''
        run: |
          git fetch origin ${{ env.SOURCE_BRANCH }}
          git checkout ${{ env.SOURCE_BRANCH }}
          if [ "${{ env.RELEASE_TYPE }}" = "uat" ]; then
            NEW_VERSION=$(npm version prerelease --preid=rc --git-tag-version=false)
          else
            NEW_VERSION=$(npm version patch --git-tag-version=false)
          fi
          echo "branch_name=${{ env.SOURCE_BRANCH }}" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create new release branch
        if: env.SOURCE_BRANCH == ''
        id: create_branch
        run: |
          # Bump version first (package.json changes but not committed)
          if [ "${{ env.RELEASE_TYPE }}" = "uat" ]; then
            NEW_VERSION=$(npm version pre${{ env.VERSION_TYPE }} --preid=rc --git-tag-version=false)
            BRANCH_NAME="release/$(echo $NEW_VERSION | sed 's/^v//' | sed 's/-rc.*//')"
          else
            NEW_VERSION=$(npm version ${{ env.VERSION_TYPE }} --git-tag-version=false)
            BRANCH_NAME="release/$(echo $NEW_VERSION | sed 's/^v//')"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Create branch with the correct name
          git checkout -b $BRANCH_NAME

      - name: Commit version bump
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json yarn.lock || true
          git commit -m "chore: bump version to ${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version }} [skip ci]"

      - name: Push branch
        run: |
          BRANCH_NAME="${{ steps.create_branch.outputs.branch_name || env.SOURCE_BRANCH }}"
          git push -u origin $BRANCH_NAME
          echo "Push completed successfully"

      - name: Create or update PR
        id: pr
        run: |
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head ${{ steps.create_branch.outputs.branch_name || env.SOURCE_BRANCH }} --json number,url -q '.[0].url' 2>/dev/null || echo "")

          if [ -n "$EXISTING_PR" ]; then
            # Update existing PR
            echo "pull-request-url=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "PR already exists: $EXISTING_PR"
          else
            # Create new PR
            PR_URL=$(gh pr create \
              --head ${{ steps.create_branch.outputs.branch_name || env.SOURCE_BRANCH }} \
              --base ${{ github.event.repository.default_branch }} \
              --title "Release ${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version }}" \
              --body "Automated release PR for ${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version }}" \
              --label ${{ env.RELEASE_TYPE }})
            echo "pull-request-url=$PR_URL" >> $GITHUB_OUTPUT
            echo "Created new PR: $PR_URL"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dismiss previous approvals (if updating)
        if: env.SOURCE_BRANCH != ''
        run: |
          BRANCH_NAME="${{ steps.create_branch.outputs.branch_name || env.SOURCE_BRANCH }}"
          PR_NUMBER=$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            gh api -X POST repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews/dismissals \
              -f message="Approvals dismissed due to version update"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Send Teams notification
      - name: Notify Teams
        run: |
          BRANCH_NAME="${{ steps.create_branch.outputs.branch_name || env.SOURCE_BRANCH }}"
          NEW_VERSION="${{ steps.create_branch.outputs.new_version || steps.update_branch.outputs.new_version  }}"
          PR_URL="${{ steps.pr.outputs.pull-request-url }}"

          payload=$(cat <<EOF
          {
              "text": "ðŸš€ **Release PR Created/Updated**\n\n**PR Link:** $PR_URL\n\n**Release Type:** ${{ env.RELEASE_TYPE }}\n**Version:** $NEW_VERSION\n**Branch:** $BRANCH_NAME\n\nPlease review and approve the release PR."
          }
          EOF
          )
          curl --request POST \
          --header "Content-Type: application/json" \
          --data "$payload" \
          "https://prod-99.westeurope.logic.azure.com:443/workflows/e47919c9301a4d0893124469d80f6cf2/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=0WZGySneST3jpYyoLplgpKDXPoZU4NEe2zSufLVzsFo"
