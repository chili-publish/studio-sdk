name: Create or Update Release PR

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type (uat or prd)"
        required: true
        type: choice
        options:
          - uat
          - prd
      version_type:
        description: "Version increment (major, minor, patch)"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      source_branch:
        description: "Existing release branch to update (optional)"
        required: false
        type: string
  # Temporary trigger for testing - remove after testing
  pull_request:
    branches: [main]
    paths: [".github/workflows/release-pr.yml"]

jobs:
  release:
    runs-on: ubuntu-latest
    # Safety check: Don't run on main branch
    if: github.ref != 'refs/heads/main'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      release_type: ${{ github.event.inputs.release_type || 'uat' }}
      version_type: ${{ github.event.inputs.version_type || 'patch' }}
      source_branch: ${{ github.event.inputs.source_branch || '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine branch and version
        id: vars
        run: |
          if [ -z "${{ env.source_branch }}" ]; then
            # Creating a new release branch
            if [ "${{ env.release_type }}" = "uat" ]; then
              NEW_VERSION=$(npm version ${{ env.version_type }} --preid=rc --git-tag-version=false)
              BRANCH_NAME="release/$(echo $NEW_VERSION | sed 's/-rc.*//')"
            else
              NEW_VERSION=$(npm version ${{ env.version_type }} --git-tag-version=false)
              BRANCH_NAME="release/$NEW_VERSION"
            fi
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_update=false" >> $GITHUB_OUTPUT
          else
            # Updating an existing release branch
            git fetch origin ${{ env.source_branch }}
            git checkout ${{ env.source_branch }}
            if [ "${{ env.release_type }}" = "uat" ]; then
              NEW_VERSION=$(npm version prerelease --preid=rc --git-tag-version=false)
            else
              NEW_VERSION=$(npm version patch --git-tag-version=false)
            fi
            echo "branch_name=${{ env.source_branch }}" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "is_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json yarn.lock || true
          git commit -m "chore: bump version to ${{ steps.vars.outputs.new_version }} [skip ci]"

      - name: Push branch
        run: |
          git push origin HEAD:refs/heads/${{ steps.vars.outputs.branch_name }}

      - name: Create or update PR
        id: pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.vars.outputs.branch_name }}
          base: ${{ github.event.repository.default_branch }}
          title: "Release ${{ steps.vars.outputs.new_version }}"
          body: "Automated release PR for ${{ steps.vars.outputs.new_version }}"
          labels: ${{ env.release_type }}
          draft: false
          update-existing: true

      - name: Dismiss previous approvals (if updating)
        if: steps.vars.outputs.is_update == 'true'
        run: |
          PR_NUMBER=$(gh pr list --head ${{ steps.vars.outputs.branch_name }} --json number -q '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            gh api -X POST repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews/dismissals \
              -f message="Approvals dismissed due to version update"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Send Teams notification
      - name: Notify Teams
        run: |
          payload=$(cat <<EOF
          {
              "text": "ðŸš€ Release PR created/updated: ${{ steps.pr.outputs.pull-request-url }}\n\nRelease Type: ${{ env.release_type }}\nVersion: ${{ steps.vars.outputs.new_version }}\nBranch: ${{ steps.vars.outputs.branch_name }}"
          }
          EOF
          )
          curl --request POST \
          --header "Content-Type: application/json" \
          --data "$payload" \
          "https://prod-99.westeurope.logic.azure.com:443/workflows/e47919c9301a4d0893124469d80f6cf2/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=0WZGySneST3jpYyoLplgpKDXPoZU4NEe2zSufLVzsFo"
