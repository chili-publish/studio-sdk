name: Publish Release UAT
on:
  release:
    types: [prereleased]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PACKAGE_SECRET }}
      - name: Check cache
        id: cache
        uses: actions/cache@v4
        with:
          path: packages/sdk/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}-0
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://npm.pkg.github.com"
          scope: "@chili-publish"
      - name: install dependencies
        run: yarn install
      - name: bump version
        uses: phips28/gh-action-bump-version@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_SECRET }}
        with:
          version-type: "prerelease"
          skip-commit: "true"
          skip-tag: "true"
      - name: execute local js script
        run: node ./.github/scripts/replicate-version.js
      - name: build code
        run: yarn build:uat
        env:
          ENGINE_DOMAIN: studio-cdn.chiligrafx-uat.com
      - name: publish sdk build
        run: node cicd.js sdk,connectors yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_SECRET }}
      - name: get new npm version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
      - name: copy file branch
        run: |
          path=packages/sdk/upload/latest
          versionpath=packages/sdk/upload/${{ steps.package-version.outputs.current-version}}
          mkdir -p ${path%"/merge"}
          cp -R packages/sdk/_bundles/* ${path%"/merge"}
          mkdir -p ${versionpath%"/merge"}
          cp -R packages/sdk/_bundles/* ${versionpath%"/merge"}

      - name: Copy to Azure Blob Storage (SDK)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch -d sdk -s packages/sdk/upload/ --connection-string "${{ secrets.AZURE_CDN_STUDIO_DEV_CONNECTION_STRING }}" --overwrite true
      - name: prepare for actions upload
        run: |
          node cicd.js actions node scripts/prepare-release.mjs
      - name: Copy to Azure Blob Storage (Actions)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch -d sdk -s packages/actions/cdn/ --connection-string "${{ secrets.AZURE_CDN_STUDIO_DEV_CONNECTION_STRING }}" --overwrite true
      # execute commit script
      - name: execute commit script
        run: node ./.github/scripts/commit.js

  update-version-management:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v2
        with:
          node-version: 20
      - name: Download and update versions file
        run: |
          # Create temporary directory
          mkdir -p temp
          # Download current versions file
          curl -o temp/supported-versions.json https://stgrafxstudioprdpublic.blob.core.windows.net/shared/version-management/supported-versions.json

          # Get the SDK version from package.json
          SDK_VERSION=$(node -p "require('./package.json').version")
          SDK_MAJOR_MINOR=$(echo $SDK_VERSION | cut -d. -f1,2)

          # Get engine version from editor-engine.json and convert latest to 0
          ENGINE_VERSION=$(node -p "require('./packages/sdk/editor-engine.json').current.replace('.latest', '.0')")

          # Create updated versions file using node
          node -e "
            const args = process.argv.slice(1);
            const fs = require('fs');
            const versions = require('./temp/supported-versions.json');
            const sdkVersion = args[0];
            const engineVersion = args[1];
            const majorMinor = args[2];
            console.log(sdkVersion, engineVersion, majorMinor);
            
            // Update latest entry
            versions.latest = {
              sdkVersion: sdkVersion,
              engineVersion: engineVersion
            };
            
            // Add/update major.minor entry
            versions[majorMinor] = {
              sdkVersion: sdkVersion,
              engineVersion: engineVersion
            };
            
            fs.writeFileSync('./temp/supported-versions.json', JSON.stringify(versions, null, 2));
          " $SDK_VERSION $ENGINE_VERSION $SDK_MAJOR_MINOR
      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ vars.SP_FRONTEND_CLIENT_ID }}", "clientSecret": "${{ secrets.SP_FRONTEND_CLIENT_SECRET }}","tenantId":"${{ vars.AZURE_TENANT_ID }}", "subscriptionId": "${{ vars.SUBSCRIPTION_ID_UAT }}"}'
      - name: Upload build
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
            --account-name ${{ vars.STORAGE_ACCOUNT_NAME_UAT }} \
            --file temp/supported-versions.json 
            --container-name shared 
            --name version-management/supported-versions.json
            --overwrite true \
            --auth-mode login
