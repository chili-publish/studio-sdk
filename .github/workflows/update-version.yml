name: Update Version Management
description: "Update the version management file"
permissions: {}
on:
  workflow_dispatch:
    inputs:
      sdk_version:
        description: 'SDK version to update (e.g. 1.17 or "latest", latest should only be used for patch version updates)'
        required: true
        type: string
      engine_version:
        description: "New engine version (e.g. 2.1.1)"
        required: true
        type: string
      environment:
        description: "Target environment (UAT or PRD)"
        required: true
        type: choice
        default: "UAT"
        options:
          - "UAT"
          - "PRD"
      update_latest:
        description: "Update the latest entry"
        required: false
        type: boolean
        default: false

jobs:
  update-version-management:
    runs-on: ubuntu-latest
    env:
      STORAGE_ACCOUNT_NAME: ${{ (inputs.environment == 'PRD') && vars.STORAGE_ACCOUNT_NAME_PROD || vars.STORAGE_ACCOUNT_NAME_UAT }}
    steps:
      - uses: actions/checkout@v3

      - name: Download and update versions file
        run: |
          # Create temporary directory
          mkdir -p temp
          # Download current versions file
          
          curl -o temp/supported-versions.json https://studio-cdn.chiligrafx${{ (inputs.environment == 'UAT') && '-uat' || '' }}.com/shared/version-management/supported-versions.json

          # Create updated versions file using node
          node -e "
            const fs = require('fs');
            const versions = require('./temp/supported-versions.json');
            const sdkVersion = '${{ inputs.sdk_version }}';
            const engineVersion = '${{ inputs.engine_version }}';
            
            if (sdkVersion === 'latest') {
              // Get the major.minor version from the latest sdkVersion
              const latestSdkVersion = versions.latest.sdkVersion;
              const majorMinor = latestSdkVersion.split('.').slice(0, 2).join('.');
              
              // Update both latest and the corresponding version entry
              versions.latest.engineVersion = engineVersion;
              versions[majorMinor].engineVersion = engineVersion;
              
              console.log('Updated engine version for latest and ' + majorMinor + ' to ' + engineVersion);
            } else {
              // Validate that the SDK version exists
              if (!versions[sdkVersion]) {
                console.error('SDK version ' + sdkVersion + ' not found in versions file');
                process.exit(1);
              }
              
              // Update engine version for the specified SDK version
              versions[sdkVersion].engineVersion = engineVersion;
              
              // If this is the latest SDK version, also update the latest entry
              if (versions.latest.sdkVersion.startsWith(sdkVersion)) {
                versions.latest.engineVersion = engineVersion;
              }

              // If update_latest is true, update the latest entry
              if (inputs.update_latest) {
                if (sdkVersion === 'latest') {
                  console.error('SDK version latest cannot be used to update the latest entry');
                  process.exit(1);
                }
                versions.latest.sdkVersion = sdkVersion;
                versions.latest.engineVersion = engineVersion;
              }
            }
            
            fs.writeFileSync('./temp/supported-versions.json', JSON.stringify(versions, null, 2));
          "

      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: >-
            {
              "clientId": "${{ vars.SP_FRONTEND_CLIENT_ID }}",
              "clientSecret": "${{ secrets.SP_FRONTEND_CLIENT_SECRET }}",
              "tenantId": "${{ vars.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ (inputs.environment == 'PROD') && vars.SUBSCRIPTION_ID_PROD || vars.SUBSCRIPTION_ID_UAT }}"
            }
      - name: Upload build
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --source temp/ \
            --destination shared/version-management \
            --overwrite true \
            --auth-mode login

  purge-cdn:
        needs: update-version-management
        name: Purge Cloudflare CDN
        runs-on: ubuntu-latest
        steps:
            - name: Purge Cloudflare CDN
              uses: chili-publish/delivery-github-utilities/actions/cloudflare/purge-cdn@cloudflare-purge-cdn_1.0.0
              with:
                  environment: ${{ inputs.environment }}
                  api-token: ${{ (inputs.environment == 'PRD') && secrets.CLOUDFLARE_CDN_PURGE_API_TOKEN_PRD || secrets.CLOUDFLARE_CDN_PURGE_API_TOKEN_UAT }}
                  path-prefix: shared/version-management